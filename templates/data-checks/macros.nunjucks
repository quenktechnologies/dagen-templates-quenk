{#

  optional

  Makes a precondition optional.
  @param {Schema} type
  @param {Output} content

#}
{% macro optional (type, content) %}
  {% if type.optional -%}
    {% if isObjectType(type) -%}
      _prec.optional<any, {{type.title or "_json.Object"}}>({{content}})
    {% else -%}
      _prec.optional({{content}})
    {% endif %}
  {% else -%}
    {{content}}
  {% endif -%}
{% endmacro %}

{# 
  Turns an array schema into a precondition. 
  
  @param {Schema} type
  @param {string} mode

#}
{% macro arrayType2Test(type, mode) %}
  {% set content -%}
    <_prec.Precondition<_json.Value,_json.Value>>_arrayPrec.map({{type2Test(type.items, mode)}})
  {% endset %}

  {% if hasChecks(type,mode) -%}
   {% set content -%}
   _prec.and({{content}}, _prec.every<_json.Value,_json.Value>({{getChecks(type, mode)|join(',')}}))
   {% endset %}
  {% endif %}

  {{optional(type, content)}}

{% endmacro %}

{# turns an object schema into a record of preconditions
  
  @param {Schema} type
  @param {string} mode  - Either "complete" or "partial".

#}
{% macro objectType2Test (type, mode) %}
  {% if isObject(type.additionalProperties) %}
    {% set content -%}
    <_prec.Precondition<_json.Value,_json.Value>>_recordPrec.map<_json.Value, _json.Value,
    {{type.title or "_json.Object"}}>({{ anyType2Test(type.additionalProperties) }})
    {% endset -%}
  {% elseif isObject(type.properties) %}
    {% set content -%}
    <_prec.Precondition<_json.Value,_json.Value>>_{{mode}}<_json.Value, _json.Value, 
     {{type.title or "_json.Object"}}>({
        {% for key,value in type.properties %}
          {% if (not value.readOnly) or hasChecks(value, mode)  %}
            '{{key}}' : {{ type2Test(value, mode) | trim }}{% if not loop.last %},{% endif %}
            {{"\n"}}
          {% endif %}
        {% endfor -%}
      })
    {% endset -%}
  {% else %}
    {% set content -%}_prec.reject('not configured'){% endset %}
  {% endif %}

  {% if hasChecks(type, mode) -%}
   {% set content -%}
    _prec.and({{content}}, _prec.every<_json.Value,_json.Value>({{ getChecks(type, mode) | join(',') }}))
   {% endset %}
  {% endif %}

  {{ optional(type, content) }}
{% endmacro %}

{# 
  
  turn a sum schema into a precondition 
  @param {Schema} type
  @param {string} mode

#}
{% macro sumType2Test (type, mode) %}
  {% if type.discriminator.type == 'rw' %}
    {% set content -%}
     {{type2Test(type.variants.write, mode)}}
    {% endset -%}
  {% elseif type.discriminator.type == 'shape' %}
    {% set content -%}
    _prec.match(
      {% for key,variant in type.variants -%}
        {% set shape =  variant.discriminator %}
        {% set validator =  type2Test(variant,mode) %}
        _prec.caseOf({{shape|dump}}, {{validator}}){% if not loop.last %},{% endif %}
      {% endfor -%})
    {% endset %}
  {% else %}

    {% set json %}{{type|dump}}{% endset %}
    {{ 'sumType2Test: Unknown discriminator type '+ 
    type.discriminator.type+ ' in '+json | error }}
  {% endif %}

  {{ optional(type, content) | trim }}
{% endmacro %}

{#
  turns any schema type into a validator 

  @param {Schema} type
  @param {string} mode

#}
{% macro anyType2Test(type, mode) %}
  {% if hasChecks(type, mode) -%}
    {% set content -%}
      _prec.every<_json.Value,_json.Value>({{getChecks(type, mode)|join(',')}}){% endset -%}
    {{ optional(type, content) | trim }}
  {% else -%}
      _prec.identity
  {% endif -%}
{% endmacro %}

{# 
 
  turns a type into a precondition. 
  
  @param {Schema} type
  @param {string} mode  

#}
{% macro type2Test(type, mode="complete") %}
  {% if isArrayType(type) %}
    {{arrayType2Test(type, mode)}}
  {% elseif isObjectType(type) %}
    {{objectType2Test(type, mode) | trim }}
  {% elseif isSumType(type) %}
    {{sumType2Test(type, mode) | trim }}
  {% else %}
    {{anyType2Test(type, mode) | trim }}
  {% endif %}
{% endmacro %}
