/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */
 
import { Post } from '../data-types/post';
import { id,title,toHTML,toDate,localize } from 'checks';
import * as _json from '@quenk/noni/lib/data/jsonx';
import * as _prec from '@quenk/preconditions/lib/async';
import * as _recordPrec from '@quenk/preconditions/lib/async/record';
import * as _arrayPrec from '@quenk/preconditions/lib/async/array';

//@ts-ignore: 6133
import { AsyncPrecondition } from '@quenk/preconditions/lib/async';

//@ts-ignore: 6133
import { Value } from '@quenk/noni/lib/data/jsonx';

//@ts-ignore: 6133
const title = "Post";
//@ts-ignore: 6133
const collection = "posts";

//@ts-ignore: 6133
const _complete = _recordPrec.restrict;

//@ts-ignore: 6133
const _partial = _recordPrec.intersect;

/**
 * DataType check.
 * 
 * Used by template generation.
 * @private 
 */
export type DataType = Post;

/**
 * PostCheckContext contains values and checks that can be used at the field level.
 */
export interface PostCheckContext {
    'title': new Function
}


/**
* PostCheckProvider for the Post type.
 */
export type PostCheckProvider
  = (ctx: PostCheckContext) => _prec.AsyncPrecondition<_json.Value, Post>
  ;


/**
 * fieldChecks for Post (AUTOGENERATED).
 */ 
export const fieldChecks = (_:PostCheckContext) : 
_prec.Preconditions<_json.Value, _json.Value> => {
 //@ts-ignore: 6133 
 let {     title } = _;
 return ({

    'id': _prec.every<_json.Value,_json.Value>(id(collection)),

    'title': _prec.every<_json.Value,_json.Value>(title),

    'body': _prec.every<_json.Value,_json.Value>(toHTML),

    'tags': <_prec.Precondition<_json.Value,_json.Value>>_arrayPrec.map(    _prec.identity
),

    'group': <_prec.Precondition<_json.Value,_json.Value>>_complete<_json.Value, _json.Value, 
     _json.Object>({
            'id' : _prec.identity,            

            'name' : _prec.identity            

}),

    'created_on': _prec.every<_json.Value,_json.Value>(toDate,localize('Port of Spain')),

    'created_by': _prec.identity
  });
}

/**
 * partialFieldChecks for Post (AUTOGENERATED).
 */ 
export const partialFieldChecks = (_: PostCheckContext):
_prec.Preconditions<_json.Value, _json.Value> => {
//@ts-ignore: 6133 
 let {     title } = _;
return ({

    'id': _prec.every<_json.Value,_json.Value>(id(collection)),
    'title': _prec.every<_json.Value,_json.Value>(title),
    'body': _prec.every<_json.Value,_json.Value>(toHTML),
    'tags': <_prec.Precondition<_json.Value,_json.Value>>_arrayPrec.map(    _prec.identity
),
    'group': <_prec.Precondition<_json.Value,_json.Value>>_partial<_json.Value, _json.Value, 
     _json.Object>({
            'id' : _prec.identity,            

            'name' : _prec.identity            

}),
    'created_on': _prec.every<_json.Value,_json.Value>(toDate,localize('Port of Spain')),
    'created_by': _prec.identity});
}

/**
 * check a value to determine if it is a correct Post
 * (AUTOGENERATED).
 */
 export const check:PostCheckProvider  = (_: PostCheckContext) :
 _prec.Precondition<_json.Value, Post> => {
 //@ts-ignore: 6133 
 let {     title } = _;
    return _prec.and<_json.Value, Post,Post>(
      _prec.async<_json.Value, Post>(validate),
       _recordPrec.restrict(fieldChecks(_)));
}

/**
 * checkPartial is like check but only checks the fields encountered.
 * (AUTOGENERATED).
 */
 export const checkPartial:PostCheckProvider = (_: PostCheckContext) :
 _prec.Precondition<_json.Value, Partial<Post>> => {
 //@ts-ignore: 6133 
 let {     title } = _;
    return _prec.and<_json.Value, Post,Post>(_prec.async<_json.Value,Post>(validatePartial), 
   _recordPrec.intersect(partialFieldChecks(_)));  
 }

