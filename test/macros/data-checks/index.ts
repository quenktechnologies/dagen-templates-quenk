/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
import * as _post from './post';
import * as _user from './user';

import { Value } from '@quenk/noni/lib/data/jsonx';
import { Maybe, fromNullable} from '@quenk/noni/lib/data/maybe';
import { Record } from '@quenk/noni/lib/data/record';
import { Precondition } from '@quenk/preconditions/lib/async';

/**
 * DataTypeUnion combines all the checks data types found in this module
 * (AUTOGENERATED).
 */
export type DataTypeUnion =
  
    _post.DataType |
  
    _user.DataType ;

/**
 * ChecksMap is a record mapping normalized model names to their respective 
 * checks.
 */
export interface ChecksMap 
  extends 
  Record<Precondition<Value, DataTypeUnion>>{}

/**
 * checksAvailable from this module (AUTOGENERATED).
 */
export const checksAvailable: ChecksMap = {

    
    'post': <Precondition<Value, DataTypeUnion>>_post.check,
    
    'user': <Precondition<Value, DataTypeUnion>>_user.check

};

/**
 * getChecksFor provides a validator from this module.
 */
export const getChecksFor = 
 (name:string) : Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(checksAvailable[name]);

/**
 * partialChecksAvailable from this module.
 */
export const partialChecksAvailable: ChecksMap = {


    'post': <Precondition<Value, Partial<DataTypeUnion>>>_post.checkPartial,

    'user': <Precondition<Value, Partial<DataTypeUnion>>>_user.checkPartial
};

/**
 * getPartialChecksFor provides a validator from this module.
 */
export const getPartialChecksFor = 
(name:string) : Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(partialChecksAvailable[name]);

