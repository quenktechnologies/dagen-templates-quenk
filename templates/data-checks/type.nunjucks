{% from "macros.nunjucks" import type2Test %}
/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */
 {# Note: The schema used with this template should have imports for the schema
   type and the "validate"/"validatePartial" functions.
 #}
{{imports2TS(document.imports, {
  '@quenk/noni/lib/data/jsonx': '_json',
  '@quenk/preconditions/lib/async': '_prec',
  '@quenk/preconditions/lib/async/record': '_recordPrec',
  '@quenk/preconditions/lib/async/array': '_arrayPrec'
  })
}}

{% for key in ["title", "collection", "table", "resource"] %}
  {% if isString(document[key]) %}
//@ts-ignore: 6133
const {{key}} = "{{document[key]}}";
  {% endif %}
{% endfor %}

/**
 * DataType checked.
 * 
 * Used by template generation.
 * @private 
 */
export type DataType = {{document.title}};

/**
 * fieldChecks for {{document.title}} (AUTOGENERATED).
 */ 
export const fieldChecks: _prec.Preconditions<_json.Value, _json.Value> = {
  {% for key, value in document.properties %}

    '{{key}}': {% if (not value.readOnly) or hasChecks(value,"complete") -%}
               {{ type2Test(value, "complete") | trim -}}
               {% else %}
               _prec.identity
               {% endif %}{%- if not loop.last %},{% endif %}

  {% endfor %}
};

/**
 * partialFieldChecks for {{ document.title }} (AUTOGENERATED).
 */ 
export const partialFieldChecks: _prec.Preconditions<_json.Value, _json.Value> = {
  {% for key,value in document.properties %}

    '{{key}}': {% if (not value.readOnly) or hasChecks(value,"partial") -%}
               {{ type2Test(value, "partial") | trim -}}
               {% else %}
                _prec.identity
               {% endif %}{%- if not loop.last %},{% endif %}

  {%- endfor -%}
};

/**
 * check a value to determine if it is a correct {{ document.title }}
 * (AUTOGENERATED).
 */
export const check: _prec.Precondition<_json.Value, {{ document.title }}> = 
  {% if hasChecks(document,"complete") %}
    _prec.and(_prec.and<_json.Value, {{ document.title }},{{ document.title }}>(
      _prec.async(validate), _recordPrec.restrict(fieldChecks)),
      _every<{{ document.title }},{{ document.title }}>({{ getChecks(document,"complete") | join(',') }})
     );
  {% else %}
    _prec.and<_json.Value, {{ document.title }},{{ document.title }}>(
      _prec.async<_json.Value, {{ document.title }}>(validate),
       _recordPrec.restrict(fieldChecks));
  {% endif %}

/**
 * checkPartial is like check but only checks the fields encountered.
 * (AUTOGENERATED).
 */
 export const checkPartial: _prec.Precondition<_json.Value, Partial<{{document.title}}>> = 
  {% if hasChecks(document, "partial") %}
    _prec.and(_prec.and<_json.Value, {{document.title}},{{document.title}}>(
      _prec.async(validatePartial),
      _recordPrec.intersect(partialFieldChecks)),
    _every({{getChecks(document,"partial") | join(',')}}));
  {% else %}
    _prec.and<_json.Value, {{document.title}},{{document.title}}>(_prec.async<_json.Value,{{document.title}}>(validatePartial), 
   _recordPrec.intersect(partialFieldChecks));  
  {% endif %}
