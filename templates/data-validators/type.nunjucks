/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
{% from "macros.nunjucks" import schema2Validator,anyType2Validator %}

{{imports2TS(document.imports, {
  '@quenk/noni/lib/data/jsonx': '_json',
  '@quenk/preconditions': '_prec',
  '@quenk/preconditions/lib/boolean': '_booleanPrec',
  '@quenk/preconditions/lib/number': '_numberPrec',
  '@quenk/preconditions/lib/string': '_stringPrec',
  '@quenk/preconditions/lib/record': '_recordPrec',
  '@quenk/preconditions/lib/array': '_arrayPrec'
  })
}}

/**
 * DataType validated.
 * 
 * Used by template generation.
 * @private 
 */
export type DataType = {{document.title}};

//@ts-ignore: 6133
const _boolean = _booleanPrec.toBoolean;

//@ts-ignore: 6133
const _number = _numberPrec.toNumber;

//@ts-ignore: 6133
const _string = _stringPrec.isString;

//@ts-ignore: 6133
const _complete = _recordPrec.restrict;

//@ts-ignore: 6133
const _partial = _recordPrec.intersect;

{% if document.additionalProperties and (not document.properties) %}
/**
 * validate a value to determine if it satisfies the {{document.title}} type
 * (AUTOGENERATED).
 */
export const validate: _prec.Precondition<_json.Value, {{document.title}}> =
_prec.and(
  _recordPrec.isRecord, 
  _recordPrec.map<_json.Value, _json.Value, {{document.title}}>(
    {{anyType2Validator(document.additionalProperties)}}
  ));

export { validate as validatePartial };
{% elseif document.properties %}

/**
 * fieldValidators for {{document.title}} (AUTOGENERATED).
 */ 
export const fieldValidators: _prec.Preconditions<_json.Value, _json.Value> = {
  {% for key,value in document.properties %}
    {% if (not value.readOnly) or hasValidators(value) %}
      '{{key}}' : {{schema2Validator(value, "complete")|trim}}{% if not loop.last %},{% endif %}{{"\n"}}
    {% endif %}
  {%- endfor -%}
};

/**
 * partialFieldValidators for {{document.title}} (AUTOGENERATED).
 */ 
export const partialFieldValidators:_prec.Preconditions<_json.Value, _json.Value> = {
  {% for key,value in document.properties %}
    {% if (not value.readOnly) or hasValidators(value, 'partial') %}
      '{{key}}' : {{schema2Validator(value,"partial")|trim}}{% if not loop.last %},{% endif %}{{"\n"}}
    {% endif %}
  {%- endfor -%}
};

/**
 * validate a value to determine if it satisfies the {{document.title}} type
 * (AUTOGENERATED).
 */
export const validate: _prec.Precondition<_json.Value, {{document.title}}> =
 _prec.and(
  _recordPrec.isRecord, 
  _recordPrec.restrict<_json.Value, _json.Value, {{document.title}}>(fieldValidators)
 );

/**
 * validatePartial is like validate but only tests the fields encountered
 * (AUTOGENERATED).
 */
export const validatePartial: _prec.Precondition<_json.Value, Partial<{{document.title}}>> =
 _prec.and(
  _recordPrec.isRecord, 
  _recordPrec.intersect<_json.Value, _json.Value, {{document.title}}>(partialFieldValidators)
 );
{% endif %}
