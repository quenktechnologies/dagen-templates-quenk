/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */

{{imports2TS(document.imports, {
  '@quenk/noni/lib/data/jsonx': '_json',
  '@quenk/noni/lib/data/maybe': '_maybe',
  '@quenk/preconditions/lib/async': '_prec',
  '@quenk/preconditions/lib/number': '_booleanPrec',
  '@quenk/preconditions/lib/number': '_numberPrec',
  '@quenk/preconditions/lib/string': '_stringPrec',
  '@quenk/preconditions/lib/record': '_recordPrec',
  '@quenk/preconditions/lib/array': '_arrayPrec'
  })
}}

/**
 * DataTypeUnion combines all the types of the validators found in this module
 * into one.
 */
export type DataTypeUnion =
  {% for name in document.names.split(" ") %}
    _{{name|camelcase}}.DataType {% if loop.last %};{% else %}{{"|\n"}}{%endif %}  
  {% endfor %}

/**
 * Checks is a record of checks.
 */
export interface Checks {

  [key:string] : Precondition<Value, DataTypeUnion>

}

/**
 * checksAvailable from this module.
 */
export const checksAvailable:Checks = {

  {% for name in document.names.split(" ") %}
    '{{name}}': <Precondition<Value, DataTypeUnion>>_{{name|camelcase}}.check{% if not loop.last %}{{",\n"}}{% endif %}
  {% endfor %}

};

/**
 * getChecksFor provides a validator from this module.
 */
export const getChecksFor = 
 (name:string) : Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(checksAvailable[name]);

/**
 * partialChecksAvailable from this module.
 */
export const partialChecksAvailable:Checks = {

  {% for name in document.names.split(" ") %}
    '{{name}}': <Precondition<Value, Partial<DataTypeUnion>>>_{{name|camelcase}}.checkPartial{% if not loop.last %}{{",\n"}}{% endif %}
  {% endfor %}

};

/**
 * getPartialChecksFor provides a validator from this module.
 */
export const getPartialChecksFor = 
(name:string) : Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(partialChecksAvailable[name]);
