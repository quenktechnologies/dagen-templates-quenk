/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
{% for name in document.schemaNames.split(",") %}
import * as _{{ name | trim | camelcase }} from './{{ name | trim | modulecase }}';
{% endfor %}

import { Record } from '@quenk/noni/lib/data/record';
import { Value } from '@quenk/noni/lib/data/jsonx';
import { Maybe, fromNullable } from '@quenk/noni/lib/data/maybe';

import { Precondition } from '@quenk/preconditions';

/**
 * DataTypeUnion combines all the validator data types found in this module
 * (AUTOGENERATED).
 */
export type DataTypeUnion =
  {% for name in document.schemaNames.split(",") %}
  
    _{{ name | trim | camelcase }}.DataType {% if loop.last %};{% else %}{{"|"}}{%endif %}

  {% endfor %}

/**
 * ValidatorMap is a record mapping normalized model names to their respective 
 * validator.
 */
export interface ValidatorMap 
  extends 
  Record<Precondition<Value, DataTypeUnion>>{}

/**
 * validatorsAvailable from this module (AUTOGENERATD).
 */
export const validatorsAvailable: ValidatorMap = {

  {% for name in document.schemaNames.split(",") %}

    '{{ name | trim }}': _{{ name | trim | camelcase }}.validate{% if not loop.last %}{{","}}{% endif %}

  {% endfor %}

};

/**
 * getValidatorFor provides a validator from this module (AUTOGENERATED).
 */
export const getValidatorsFor = 
 (name: string): Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(validatorsAvailable[name]);

/**
 * partialValidatorsAvailable from this module (AUTOGENERATED).
 */
export const partialValidatorsAvailable:ValidatorMap = {

  {% for name in document.schemaNames.split(",") %}

    '{{ name | trim }}': _{{ name | camelcase }}.validatePartial{% if not loop.last %}{{","}}{% endif %}

  {% endfor %}
};

/**
 * getPartialvalidatorsFor provides a validator from this module (autogenerated).
 */
export const getPartialValidatorsFor = 
 (name:string): Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(partialValidatorsAvailable[name]);
