/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
import * as _post from './post';
import * as _user from './user';

import { Value } from '@quenk/noni/lib/data/jsonx';
import { Maybe, fromNullable} from '@quenk/noni/lib/data/maybe';
import { Record } from '@quenk/noni/lib/data/record';
import { AsyncPrecondition } from '@quenk/preconditions/lib/async';

/**
 * DataTypeUnion combines all the checks data types found in this module
 * (AUTOGENERATED).
 */
export type DataTypeUnion =
  
    _post.DataType |
  
    _user.DataType ;

/**
 * CheckContextUnion combines all the check contexts found in this module
 * (AUTOGENERATED).
 */
export type CheckContextUnion =
  
  _post.PostCheckContext&
  
  _user.UserCheckContext;

/**
 * CheckProviderUnion combines all the checks providers found in this module
 * (AUTOGENERATED).
 */
export type CheckProviderUnion =
  
  _post.PostCheckProvider|
  
  _user.UserCheckProvider;

/**
 * Check is an async precondition specialized for processing jsonx values.
 */
export type Check<T extends Value> = AsyncPrecondition<Value, T>;

/**
 * ChecksMap is a record mapping normalized model names to their 
 * respective checks.
 */
export interface ChecksMap<T extends Value>
  extends 
  Record<Check<T>>{}

/**
 * checksAvailable from this module (AUTOGENERATED).
 */
 export const checksAvailable = (_:CheckContextUnion) : ChecksMap<DataTypeUnion>=>({

    
    'post': <Check<DataTypeUnion>>_post.check(_),
    
    'user': <Check<DataTypeUnion>>_user.check(_)

});

/**
 * getChecksFor provides a validator from this module.
 */
export const getChecksFor = 
(ctx: CheckContextUnion, name:string): Maybe<Check<DataTypeUnion>> => 
 fromNullable(checksAvailable(ctx)[name]);

/**
 * partialChecksAvailable from this module.
 */
 export const partialChecksAvailable =
 (_: CheckContextUnion) : ChecksMap<DataTypeUnion> => ({


    'post': <Check<DataTypeUnion>>_post.checkPartial(_),

    'user': <Check<DataTypeUnion>>_user.checkPartial(_)
});

/**
 * getPartialChecksFor provides a validator from this module.
 */
export const getPartialChecksFor = 
(ctx: CheckContextUnion, name:string) : Maybe<Check<DataTypeUnion>> => 
  fromNullable(partialChecksAvailable(ctx)[name]);

