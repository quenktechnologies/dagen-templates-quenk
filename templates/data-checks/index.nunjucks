/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
{% for name in document.schemaNames.split(",") %}
import * as _{{ name | trim | camelcase }} from './{{ name | trim | modulecase }}';
{% endfor %}

import { Value, Object } from '@quenk/noni/lib/data/jsonx';
import { Maybe, fromNullable} from '@quenk/noni/lib/data/maybe';
import { Record } from '@quenk/noni/lib/data/record';
import { AsyncPrecondition } from '@quenk/preconditions/lib/async';

/**
 * DataTypeUnion combines all the checks data types found in this module
 * (AUTOGENERATED).
 */
export type DataTypeUnion =
  {% for name in document.schemaNames.split(",") %}
  
    _{{ name | trim | camelcase }}.DataType {% if loop.last %};{% else %}{{"|"}}{%endif %}

  {% endfor %}

/**
 * CheckContextUnion combines all the check contexts found in this module
 * (AUTOGENERATED).
 */
export type CheckContextUnion =
  {% for name in document.schemaNames.split(",") %}
  
  _{{ name | trim | camelcase }}.{{ name | classcase }}CheckContext{% if loop.last %};{% else %}{{"&"}}{%endif %}

  {% endfor %}

/**
 * CheckProviderUnion combines all the checks providers found in this module
 * (AUTOGENERATED).
 */
export type CheckProviderUnion =
  {% for name in document.schemaNames.split(",") %}
  
  _{{ name | trim | camelcase }}.{{ name | classcase }}CheckProvider{% if loop.last %};{% else %}{{"|"}}{%endif %}

  {% endfor %}

/**
 * Check is an async precondition specialized for processing jsonx values.
 */
export type Check<T extends Object> = AsyncPrecondition<Value, T>;

/**
 * ChecksMap is a record mapping normalized model names to their 
 * respective checks.
 */
export interface ChecksMap<T extends Object>
  extends 
  Record<Check<T>>{}

/**
 * checksAvailable from this module (AUTOGENERATED).
 */
 export const checksAvailable = (_:CheckContextUnion) : ChecksMap<DataTypeUnion>=>({

  {% for name in document.schemaNames.split(",") %}
    
    '{{ name | trim }}': <Check<DataTypeUnion>>_{{ name | camelcase }}.check(_){% if not loop.last %}{{","}}{% endif %}

  {% endfor %}

});

/**
 * getChecksFor provides a validator from this module.
 */
export const getChecksFor = 
(ctx: CheckContextUnion, name:string): Maybe<Check<DataTypeUnion>> => 
 fromNullable(checksAvailable(ctx)[name]);

/**
 * partialChecksAvailable from this module.
 */
 export const partialChecksAvailable =
 (_: CheckContextUnion) : ChecksMap<DataTypeUnion> => ({

  {% for name in document.schemaNames.split(",") %}

    '{{ name | trim }}': <Check<DataTypeUnion>>_{{ name | camelcase }}.checkPartial(_){% if not loop.last %}{{","}}{% endif %}

  {% endfor %}
});

/**
 * getPartialChecksFor provides a validator from this module.
 */
export const getPartialChecksFor = 
(ctx: CheckContextUnion, name:string) : Maybe<Check<DataTypeUnion>> => 
  fromNullable(partialChecksAvailable(ctx)[name]);
