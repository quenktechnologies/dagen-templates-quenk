// AUTOGENERATED - DO NOT EDIT MANUALLY!
{% if document.test %}

import tests from '{{document.test.data}}';

import { assert } from '@quenk/test/lib/assert';

import { Value } from '@quenk/noni/lib/data/jsonx';

import { Precondition } from '@quenk/precondition';

import { validate, validatePartial } from '{{document.test.target}}';

/**
 * TestDataSet groups the TestData into "validate" and "validatePartial" targets.
 */ 
export interface TestDataSet {

  validate: TestData[]

  validatePartial: TestData[]

}

/**
 * TestData used to generate dynamic tests.
 */ 
export interface TestData {

 /**
  * input to be validated.
  */
 input: Value,

 /**
  * success should be specified if `input` is expected to be correct.
  */
 success?: Object,

 /**
  * failure should be specified if `input` is expected to be incorrect.
  */
 failure?: object

}

const runTest = (test: TestData, func: Precondition<Value,Value>) => {

  let eresult = func(test.input);

  if(test.success) {

    assert(eresult.isRight()).true();

    assert(eresult.takeRight()).equate(test.success);

  } else {

    assert(eresult.isLeft()).true();

    assert(eresult.takeLeft().explain({})).equate(test.failure);

  }

}

/**
 * Tests for {{document.title}} validators.
 */
describe('{{document.title}}', ()=> {

  describe('validate', ()=> {

    tests.validate.forEach(test => {

      it(`Running test: ${JSON.stringify(test.input, null, 2)}`, ()=> {

        runTest(test, validate);

      });

    });

  });

  describe('validatePartial', ()=> {

    tests.validatePartial.forEach(test => {

      it(`validatePartial: ${JSON.stringify(test.input, null, 2)}`, ()=> {

        runTest(test, validatePartial);

      });

    });

  });

});
{% endif %}
