/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
import * as mongodb from 'mongodb';
{% for name in document.schemaNames.split(",") %}
import * as _{{ name | trim | camelcase }} from './{{ name | trim | modulecase }}';
{% endfor %}

import { Maybe, fromNullable } from '@quenk/noni/lib/data/maybe';

import { Model } from '@quenk/dback-model-mongodb';

/**
 * DataTypeUnion combines all the model data types found in this module
 * (AUTOGENERATED).
 */
export type DataTypeUnion =
  {% for name in document.schemaNames.split(",") %}
  
    _{{ name | trim | camelcase }}.DataType {% if loop.last %};{% else %}{{"|"}}{%endif %}

  {% endfor %}

/**
 * ModelGetter is a function that provides an instance of a Model.
 */
export type ModelGetter = (db: mongodb.Db) => Model<DataTypeUnion>

/**
 * Models is a record of Models.
 */
export interface Models {

  [key:string] : ModelGetter

}

/**
 * modelsAvailable from this module.
 */
export const modelsAvailable:Models = {

  {% for model in document.schemaNames.split(",") %}

    '{{ model | trim }}': <ModelGetter>_{{ model |trim | camelcase }}.ModelImpl.getInstance{% if not loop.last %}{{","}}{% endif %}

  {% endfor %}

};

/**
 * getInstance of a Model from this module using its name.
 *
 * The returned Model may not be completely type safe.
 */
export const getInstanceOf =
(db:mongodb.Db, name:string) : Maybe<Model<DataTypeUnion>> => 
  fromNullable(modelsAvailable[name]).map(f => f(db));
