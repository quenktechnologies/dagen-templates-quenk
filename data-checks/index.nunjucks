/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */ 
{% for name in document.schemaNames.split(",") %}
import * as _{{ name | trim | camelcase }} from './{{ name | trim | modulecase }}';
{% endfor %}

import { Value } from '@quenk/noni/lib/data/jsonx';
import { Maybe, fromNullable} from '@quenk/noni/lib/data/maybe';
import { Record } from '@quenk/noni/lib/data/record';
import { Precondition } from '@quenk/preconditions/lib/async';

/**
 * DataTypeUnion combines all the checks data types found in this module
 * (AUTOGENERATED).
 */
export type DataTypeUnion =
  {% for name in document.schemaNames.split(",") %}
  
    _{{ name | trim | camelcase }}.DataType {% if loop.last %};{% else %}{{"|"}}{%endif %}

  {% endfor %}

/**
 * ChecksMap is a record mapping normalized model names to their respective 
 * checks.
 */
export interface ChecksMap 
  extends 
  Record<Precondition<Value, DataTypeUnion>>{}

/**
 * checksAvailable from this module (AUTOGENERATED).
 */
export const checksAvailable: ChecksMap = {

  {% for name in document.schemaNames.split(",") %}
    
    '{{ name | trim }}': <Precondition<Value, DataTypeUnion>>_{{ name | camelcase }}.check{% if not loop.last %}{{","}}{% endif %}

  {% endfor %}

};

/**
 * getChecksFor provides a validator from this module.
 */
export const getChecksFor = 
 (name:string) : Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(checksAvailable[name]);

/**
 * partialChecksAvailable from this module.
 */
export const partialChecksAvailable: ChecksMap = {

  {% for name in document.schemaNames.split(",") %}

    '{{ name | trim }}': <Precondition<Value, Partial<DataTypeUnion>>>_{{ name | camelcase }}.checkPartial{% if not loop.last %}{{","}}{% endif %}

  {% endfor %}
};

/**
 * getPartialChecksFor provides a validator from this module.
 */
export const getPartialChecksFor = 
(name:string) : Maybe<Precondition<Value, DataTypeUnion>> => 
 fromNullable(partialChecksAvailable[name]);
